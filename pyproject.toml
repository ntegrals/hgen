[project]
name = "hypergen"
version = "0.1.0"
description = "Unified post-training and inference framework for diffusion models"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "HyperGen Team"},
]
keywords = ["diffusion", "ai", "machine-learning", "deep-learning", "pytorch", "inference", "training"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "diffusers>=0.25.0",
    "transformers>=4.36.0",
    "accelerate>=0.25.0",
    "peft>=0.7.0",
    "safetensors>=0.4.0",
    "huggingface-hub>=0.19.0",
    "pillow>=10.0.0",
    "numpy>=1.24.0",
    "tqdm>=4.65.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.0.0",
    "aiofiles>=23.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.5.0",
]
quantization = [
    "bitsandbytes>=0.41.0",
]
video = [
    "opencv-python>=4.8.0",
]
xformers = [
    "xformers>=0.0.23",
]

[project.scripts]
hypergen = "hypergen.cli:main"

[project.urls]
Homepage = "https://github.com/hypergen/hypergen"
Documentation = "https://hypergen.readthedocs.io"
Repository = "https://github.com/hypergen/hypergen"
Issues = "https://github.com/hypergen/hypergen/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = [
    "hypergen/**/*.py",
    "hypergen/**/*.pyi",
]
exclude = [
    "tests/",
    "docs/",
    "examples/",
]

[tool.uv]
dev-dependencies = [
    "ipython>=8.17.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
]

[tool.ruff]
target-version = "py38"
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "SIM",    # flake8-simplify
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "W191",   # indentation contains tabs
]
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint.isort]
known-first-party = ["hypergen"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
check_untyped_defs = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "diffusers.*",
    "transformers.*",
    "peft.*",
    "accelerate.*",
    "bitsandbytes.*",
    "cv2.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["."]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=hypergen",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["hypergen"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]